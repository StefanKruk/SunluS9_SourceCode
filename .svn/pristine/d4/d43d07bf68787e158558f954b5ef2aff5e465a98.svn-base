/**
 * Marlin 3D Printer Firmware
 * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
 *
 * Based on Sprinter and grbl.
 * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 *
 */
#pragma once

#include "../DGUSDisplayDef.h"

enum DGUSLCD_Screens : uint8_t {
  DGUSLCD_SCREEN_BOOT                = 0,
  DGUSLCD_SCREEN_CN_MAIN             = 1,
  DGUSLCD_SCREEN_EN_MAIN             = 2,
  DGUSLCD_SCREEN_CN_SDFILELIST		 = 3,
  DGUSLCD_SCREEN_EN_SDFILELIST       = 4,
  DGUSLCD_SCREEN_CN_STATUS           = 5,
  DGUSLCD_SCREEN_EN_STATUS           = 6,
  DGUSLCD_SCREEN_CN_UTILITIES		 = 7,
  DGUSLCD_SCREEN_EN_UTILITIES		 = 8,
  DGUSLCD_SCREEN_EN_TEMP		 	 = 9,
  DGUSLCD_SCREEN_EN_AXIS_PAGE        = 10,
  DGUSLCD_SCREEN_CN_FILAMENT_PAGE    = 11,
  DGUSLCD_SCREEN_EN_FILAMENT_PAGE    = 12,
//  DGUSLCD_SCREEN_CN_RATE_PAGE    	 = 13,
//  DGUSLCD_SCREEN_EN_RATE_PAGE    	 = 14,
  DGUSLCD_SCREEN_EN_LEVELING_Child_OVER = 15,
  DGUSLCD_SCREEN_CN_LEVELING_Child_OVER = 16,
  DGUSLCD_SCREEN_CN_PAUSE_SELECT		= 17,
  DGUSLCD_SCREEN_EN_PAUSE_SELECT		= 18,
  DGUSLCD_SCREEN_CN_CANCEL_SELECT 		= 19,
  DGUSLCD_SCREEN_EN_CANCEL_SELECT		= 20,
  //DGUSLCD_SCREEN_TEMPERATURE         = 20,
  DGUSLCD_SCREEN_EN_CHANGE_FILAMENT  = 21,
  DGUSLCD_SCREEN_CN_CHANGE_FILAMENT  = 22,
  DGUSLCD_SCREEN_CN_PRINTINGFINISHED  = 23,
  DGUSLCD_SCREEN_EN_PRINTINGFINISHED  = 24,
  DGUSLCD_SCREEN_CN_PRINTINGCONTINUE  = 25,
  DGUSLCD_SCREEN_EN_PRINTINGCONTINUE  = 26,
  DGUSLCD_SCREEN_CONFIRM             = 29,
  //DGUSLCD_SCREEN_STATUS              = 30,
  DGUSLCD_SCREEN_CN_DRYBOX           = 32,
  DGUSLCD_SCREEN_CN_AUXLEVEL	     = 33,
  DGUSLCD_SCREEN_EN_AUXLEVEL	     = 34,
  DGUSLCD_SCREEN_SDFILELIST_NULL     = 35,
  DGUSLCD_SCREEN_LANGUAGE_SELECT     = 36,
  DGUSLCD_SCREEN_SDFILELIST_NULL_CN  = 37,
  DGUSLCD_SCREEN_CN_LEVELING_Child	 = 38,
  DGUSLCD_SCREEN_CN_LEVELING		 = 39,
  DGUSLCD_SCREEN_CN_MENSUR_LEVEL     = 40,
  DGUSLCD_SCREEN_CN_STATUS_PAUSE     = 41,
  DGUSLCD_SCREEN_EN_STATUS_PAUSE     = 42,
  DGUSLCD_SCREEN_CONFIRM_EN          = 43,
  DGUSLCD_SCREEN_CN_TEMP		 	 = 44,
  DGUSLCD_SCREEN_EN_LEVELING		 = 45,
  DGUSLCD_SCREEN_CN_WAIT_MOVE        = 46,
  DGUSLCD_SCREEN_EN_WAIT_MOVE        = 47,
  //DGUSLCD_SCREEN_FLOWRATES           = 47,
  DGUSLCD_SCREEN_EN_LEVELING_Child	 = 48,
  DGUSLCD_SCREEN_EN_MENSUR_LEVEL     = 49,
  DGUSLCD_SCREEN_EN_DRYBOX           = 50,
  DGUSLCD_SCREEN_SDPRINTMANIPULATION = 52,
  DGUSLCD_SCREEN_LANGUAGE_SELECT_EN  = 53,
  DGUSLCD_SCREEN_EN_POWER_LOSS       = 54,
  DGUSLCD_SCREEN_CN_POWER_LOSS       = 55,
  DGUSLCD_SCREEN_CN_TEST_DRYBOX      = 58,
  DGUSLCD_SCREEN_EN_TEST_DRYBOX      = 59,
  DGUSLCD_SCREEN_CN_INFO 		     = 63,
  DGUSLCD_SCREEN_KILL 		         = 64,
  DGUSLCD_SCREEN_EN_INFO 		     = 65,
  DGUSLCD_SCREEN_CN_WAITPOWERLOSS	 = 67,
  DGUSLCD_SCREEN_CN_WAITHEATING		 = 68,
  DGUSLCD_SCREEN_CN_WAITOPERATE		 = 69,
  
//  DGUSLCD_SCREEN_POWER_LOSS          = 100,
  DGUSLCD_SCREEN_PREHEAT             = 120,
  DGUSLCD_SCREEN_UTILITY             = 110,
  DGUSLCD_SCREEN_FILAMENT_HEATING    = 146,
  DGUSLCD_SCREEN_FILAMENT_LOADING    = 148,
  DGUSLCD_SCREEN_FILAMENT_UNLOADING  = 158,
  DGUSLCD_SCREEN_SDPRINTTUNE         = 170,
 // DGUSLCD_SCREEN_KILL                = 250, ///< Kill Screen. Must always be 250 (to be able to display "Error wrong LCD Version")
  DGUSLCD_SCREEN_WAITING             = 251,
  DGUSLCD_SCREEN_POPUP               = 252, ///< special target, popup screen will also return this code to say "return to previous screen"
  DGUSLDC_SCREEN_UNUSED              = 255
};




/*sunlu ui config*/

//C--->chinese   E---->English

constexpr uint16_t C_UI_MAIN_PAGE= 1;
constexpr uint16_t E_UI_MAIN_PAGE= 2;
constexpr uint16_t E_UI_PRINT_DONE_PAGE= 24;










constexpr uint16_t DEAL_EVENT= 0xFFFF;

constexpr uint16_t VP_GetCFG=0x0080;

constexpr uint16_t E_VP_UI_PK_PRINT= 0x1000;
constexpr uint16_t E_VP_UI_RK_UTILITIES= 0x2000;
constexpr uint16_t E_VP_UI_RK_INFO= 0x3000;

constexpr uint16_t C_VP_UI_PK_PRINT= E_VP_UI_PK_PRINT+0x3000;
constexpr uint16_t C_VP_UI_RK_UTILITIES= E_VP_UI_RK_UTILITIES+0x3000;






constexpr uint16_t head_temp_targe=0xF002;
constexpr uint16_t head_temp_real=0xF000;
constexpr uint16_t bed_temp_real=0xF004;
constexpr uint16_t bed_temp_targe=0xF006;
constexpr uint16_t test_vp=0xF008;

constexpr uint16_t VP_T_Bed_Is = 0x3080;  // 4 Byte Integer



//Back
constexpr uint16_t Back_RK_returnmain=0x2FFF;
constexpr uint16_t Back_RK_returnutilities=0x24F0;
constexpr uint16_t Back_RK_returnleveling=0x24F1;



//print info


constexpr uint16_t RTX_filename=0x1090+3;
//constexpr uint16_t head_temp_targe=0xF002;
//constexpr uint16_t head_temp_real=0xF000;
//constexpr uint16_t bed_temp_real=0xF004;
//constexpr uint16_t bed_temp_targe=0xF006;

// Actual Position
//constexpr uint16_t VP_XPos = 0x1104;  // 4 Byte Fixed point number; format xxx.yy
//constexpr uint16_t VP_YPos = 0x1106;  // 4 Byte Fixed point number; format xxx.yy
//constexpr uint16_t VP_ZPos = 0x1108;  // 4 Byte Fixed point number; format xxx.yy
//constexpr uint16_t VP_EPos = 0x11A0;  // 4 Byte Fixed point number; format xxx.yy
//constexpr uint16_t VP_Feedrate_Percentage = 0x3102; // 2 Byte Integer (0..100)




////SD FILE SELECT contorl
constexpr uint16_t VP_RTX_sdfile_col_1=0x1010+3;
constexpr uint16_t VP_RTX_sdfile_col_2=0x1030+3;
constexpr uint16_t VP_RTX_sdfile_col_3=0x1050+3;
constexpr uint16_t VP_RTX_sdfile_col_4=0x1070+3;

constexpr uint16_t VP_RK_sdfile_col_1=0x1005;
constexpr uint16_t VP_RK_sdfile_col_2=0x1005;
constexpr uint16_t VP_RK_sdfile_col_3=0x1005;
constexpr uint16_t VP_RK_sdfile_col_4=0x1005;

constexpr uint16_t VP_RK_UP_PAGE=0x1009;
constexpr uint16_t VP_RK_DOWN_PAGE=0x1009;

//PRINT INFO MESSAGE
//constexpr uint16_t VP_TX_print_time=0x1101;
constexpr uint16_t VP_TX_surplus_time=0x1102;

constexpr uint16_t VP_Feedrate_Percentage = 0x1102; // 2 Byte Integer (0..100)
// Actual Position
constexpr uint16_t VP_XPos = 0x1104;  // 4 Byte Fixed point number; format xxx.yy
constexpr uint16_t VP_YPos = 0x1106;  // 4 Byte Fixed point number; format xxx.yy
constexpr uint16_t VP_ZPos = 0x1108;  // 4 Byte Fixed point number; format xxx.yy
constexpr uint16_t VP_EPos = 0x110A;  // 4 Byte Fixed point number; format xxx.yy
constexpr uint16_t VP_PrintProgress_Percentage = 0x110C; // 2 Byte Integer (0..100)
constexpr uint16_t VP_PrintTime = 0x1110;
constexpr uint16_t VP_PrintTime_LEN = 10;
constexpr uint16_t VP_SD_ResumePauseAbort = 0x1100; // Resume(Data=0), Pause(Data=1), Abort(Data=2) SD Card prints
constexpr uint16_t VP_RK_print_continue=0x1109;
constexpr uint16_t VP_RK_print_pause=0x1100;
//constexpr uint16_t VP_RK_print_cancel=0x1100;
constexpr uint16_t VP_RK_PowerLow=0x1101;


//constexpr uint16_t VP_RTX_filename=0x1100;
//constexpr uint16_t VP_SD_Print_Filename = 0x1090+3; //

constexpr uint16_t VP_RK_add_rate=0x1120;
constexpr uint16_t VP_RK_dec_rate=0x1121;
//constexpr uint16_t VP_RK_Toload_filament=0x1122;
//constexpr uint16_t VP_RK_ToUnload_filament=0x1123;


constexpr uint16_t VP_real_rate=0x1102;
constexpr uint16_t VP_SD_Print_LiveAdjustZ_up = 0x1122; //
constexpr uint16_t VP_SD_Print_LiveAdjustZ_down = 0x1123; // 


//UTILITES UI
constexpr uint16_t VP_RK_Temp=0x2100;
constexpr uint16_t VP_RK_Axis=0x2200;
constexpr uint16_t VP_RK_DryBox=0x2300;
constexpr uint16_t VP_RK_Filament=0x2400;
constexpr uint16_t VP_RK_CN_Filament=VP_RK_Filament+0x3000;
constexpr uint16_t VP_RK_Leveling=0x2500;
constexpr uint16_t VP_RK_Disableaxis=0x2600;
constexpr uint16_t VP_RK_Language=0x2700;
constexpr uint16_t VP_RK_reset=0x2800;


//UTILITES-->Reset UI
////constexpr uint16_t VP_RK_reset=0x2800;

//UTILITES-->TEMP UI
constexpr uint16_t VP_RK_pla_temp=0x2110;
constexpr uint16_t VP_RK_abs_temp=0x2120;
constexpr uint16_t VP_RK_cooling_head=0x2130;
constexpr uint16_t VP_RK_cooling_bed=0x2140;
constexpr uint16_t VP_RK_down_temp_head=0x2150;
constexpr uint16_t VP_RK_down_temp_bed=0x2160;
constexpr uint16_t VP_RK_up_temp_head=0x2170;
constexpr uint16_t VP_RK_up_temp_bed=0x2180;


//UTILITES-->AXIS UI
constexpr uint16_t VP_RK_01_step=0x2210;
constexpr uint16_t VP_RK_1_step=0x2220;
constexpr uint16_t VP_RK_10_step=0x2230;
constexpr uint16_t VP_RK_home_all=0x2240;
constexpr uint16_t VP_RK_move_x_r=0x2250;
constexpr uint16_t VP_RK_move_x_p=0x2260;
constexpr uint16_t VP_RK_move_z_p=0x2270;
constexpr uint16_t VP_RK_move_z_r=0x2280;
constexpr uint16_t VP_RK_move_y_p=0x2290;
constexpr uint16_t VP_RK_move_y_r=0x22A0;
constexpr uint16_t VP_RK_home_x=0x22B0;
constexpr uint16_t VP_RK_home_y=0x22C0;
constexpr uint16_t VP_RK_home_z=0x22D0;



//UTILITES-->RATE UI
#if 0
constexpr uint16_t VP_set_rate=0x2320;
constexpr uint16_t VP_RK_apply=0x2350;
#endif

//UTILITES-->DRYBOX UI
constexpr uint16_t VP_Cur_Temp=0x2301;
constexpr uint16_t VP_Cur_humidity=0x2303;
constexpr uint16_t VP_Targe_Temp=0x2305;
constexpr uint16_t VP_Dry_Time=0x2310;
constexpr uint16_t VP_Add_Targe_Temp=0x2307;
constexpr uint16_t VP_Dec_Targe_Temp=0x2308;
constexpr uint16_t VP_Add_Dry_Time=0x2309;
constexpr uint16_t VP_Dec_Dry_Time=0x230A;
constexpr uint16_t VP_DRYBOX_CANCEL=0x230B;
constexpr uint16_t VP_DRYBOX_apply=0x230C;



//UTILITES-->FILEMENT UI
constexpr uint16_t VP_RK_filament_pla=0x2410;
constexpr uint16_t VP_RK_filament_abs=0x2420;
constexpr uint16_t VP_RK_load_filament=0x2430;
constexpr uint16_t VP_RK_unload_filament=0x2440;
constexpr uint16_t VP_NUM_filament_len=0x2450;
constexpr uint16_t VP_NUM_Temp=0x2460;
constexpr uint16_t VP_RK_add_filament_len=0x245A;
constexpr uint16_t VP_RK_dec_filament_len=0x245B;







//UTILITES-->LEVEL UI
constexpr uint16_t VP_RK_Aux_Level=0x2503;
constexpr uint16_t VP_RK_Measure_Level=0x2504;
constexpr uint16_t VP_RK_Auto_Level_switch=0x2505;
constexpr uint16_t VP_Num_Point_1=0x2506;
constexpr uint16_t VP_Num_Point_2=0x2508;
constexpr uint16_t VP_Num_Point_3=0x250a;
constexpr uint16_t VP_Num_Point_4=0x250c;
constexpr uint16_t VP_Num_Point_5=0x250e;
constexpr uint16_t VP_Num_Point_6=0x2510;
constexpr uint16_t VP_Num_Point_7=0x2512;
constexpr uint16_t VP_Num_Point_8=0x2514;
constexpr uint16_t VP_Num_Point_9=0x2516;
constexpr uint16_t VP_Num_Point_10=0x2518;
constexpr uint16_t VP_Num_Point_11=0x251a;
constexpr uint16_t VP_Num_Point_12=0x251c;
constexpr uint16_t VP_Num_Point_13=0x251e;
constexpr uint16_t VP_Num_Point_14=0x2520;
constexpr uint16_t VP_Num_Point_15=0x2522;
constexpr uint16_t VP_Num_Point_16=0x2524;

//UTILITES-->disableaxis UI
constexpr uint16_t VP_RK_disableaxis=0x2600;



//UTILITES-->language UI
constexpr uint16_t VP_RK_language=0x2700;



//POWER LOSS SAVE UI
constexpr uint16_t VP_RK_POWER_LOSS_RECOVERY=0x2900;


//device info
constexpr uint16_t VP_device_info=0xf090+3;



//VP_M108
constexpr uint16_t VP_M108=0xFEEE;



constexpr uint16_t VP_M117 = 0xE000;
constexpr uint8_t VP_M117_LEN = 0x20;

















// Display Memory layout used (T5UID)
// Except system variables this is arbitrary, just to organize stuff....

// 0x0000 .. 0x0FFF  -- System variables and reserved by the display
// 0x1000 .. 0x1FFF  -- Variables to never change location, regardless of UI Version
// 0x2000 .. 0x2FFF  -- Controls (VPs that will trigger some action)
// 0x3000 .. 0x4FFF  -- Marlin Data to be displayed
// 0x5000 ..         -- SPs (if we want to modify display elements, e.g change color or like) -- currently unused

// As there is plenty of space (at least most displays have >8k RAM), we do not pack them too tight,
// so that we can keep variables nicely together in the address space.
#if 0
// UI Version always on 0x1000...0x1002 so that the firmware can check this and bail out.
constexpr uint16_t VP_UI_VERSION_MAJOR = 0x1000;  // Major -- incremented when incompatible
constexpr uint16_t VP_UI_VERSION_MINOR = 0x1001;  // Minor -- incremented on new features, but compatible
constexpr uint16_t VP_UI_VERSION_PATCH = 0x1002;  // Patch -- fixed which do not change functionality.
constexpr uint16_t VP_UI_FLAVOUR       = 0x1010;  // lets reserve 16 bytes here to determine if UI is suitable for this Marlin. tbd.
#endif
// Storage space for the Killscreen messages. 0x1100 - 0x1200 . Reused for the popup.
constexpr uint16_t VP_MSGSTR1 = 0xf010+3;
constexpr uint8_t VP_MSGSTR1_LEN = 0x20;  // might be more place for it...
constexpr uint16_t VP_MSGSTR2 = 0xf030+3;
constexpr uint8_t VP_MSGSTR2_LEN = 0x20;
constexpr uint16_t VP_MSGSTR3 = 0xf050+3;
constexpr uint8_t VP_MSGSTR3_LEN = 0x20;
constexpr uint16_t VP_MSGSTR4 = 0xf070+3;
constexpr uint8_t VP_MSGSTR4_LEN = 0x20;

#if 0
// Screenchange request for screens that only make sense when printer is idle.
// e.g movement is only allowed if printer is not printing.
// Marlin must confirm by setting the screen manually.
constexpr uint16_t VP_SCREENCHANGE_ASK = 0x2000;
constexpr uint16_t VP_SCREENCHANGE = 0x2001;   // Key-Return button to new menu pressed. Data contains target screen in low byte and info in high byte.
constexpr uint16_t VP_TEMP_ALL_OFF = 0x2002;   // Turn all heaters off. Value arbitrary ;)=
constexpr uint16_t VP_SCREENCHANGE_WHENSD = 0x2003; // "Print" Button touched -- go only there if there is an SD Card.

constexpr uint16_t VP_CONFIRMED = 0x2010; // OK on confirm screen.
#endif
// Buttons on the SD-Card File listing.

#if 0
constexpr uint16_t VP_SD_ScrollEvent = 0x2020; // Data: 0 for "up a directory", numbers are the amount to scroll, e.g -1 one up, 1 one down
constexpr uint16_t VP_SD_FileSelected = 0x2022; // Number of file field selected.
constexpr uint16_t VP_SD_FileSelectConfirm = 0x2024; // (This is a virtual VP and emulated by the Confirm Screen when a file has been confirmed)
#else
constexpr uint16_t VP_SD_ScrollEvent = 0x1009; // Data: 0 for "up a directory", numbers are the amount to scroll, e.g -1 one up, 1 one down
constexpr uint16_t VP_SD_FileSelected = 0x1005; // Number of file field selected.
constexpr uint16_t VP_SD_FileSelectConfirm = 0x1006; // (This is a virtual VP and emulated by the Confirm Screen when a file has been confirmed)
constexpr uint16_t VP_SD_FilePrint_AutoLeve = 0x1007; // 
constexpr uint16_t VP_SD_FilePrint_FilamentRunout = 0x1008; // 
constexpr uint16_t VP_SD_FilePrint_Filament_Jams = 0x100a; // 
//constexpr uint16_t VP_SD_AbortPrintConfirmed = 0x1101; // Abort print confirmation (virtual, will be injected by the confirm dialog)
constexpr uint16_t VP_SD_FileName_LEN = 32; // LEN is shared for all entries.
constexpr uint16_t DGUS_SD_FILESPERSCREEN = 4; // FIXME move that info to the display and read it from there.
#endif
#if 0

constexpr uint16_t VP_SD_Print_Setting = 0x2040;


// Controls for movement (we can't use the incremental / decremental feature of the display at this feature works only with 16 bit values
// (which would limit us to 655.35mm, which is likely not a problem for common setups, but i don't want to rule out hangprinters support)
// A word about the coding: The VP will be per axis and the return code will be an signed 16 bit value in 0.01 mm resolution, telling us
// the relative travel amount t he user wants to do. So eg. if the display sends us VP=2100 with value 100, the user wants us to move X by +1 mm.

constexpr uint16_t VP_MOVE_X = 0x2100;
constexpr uint16_t VP_MOVE_Y = 0x2102;
constexpr uint16_t VP_MOVE_Z = 0x2104;
constexpr uint16_t VP_MOVE_E0 = 0x2110;
constexpr uint16_t VP_MOVE_E1 = 0x2112;
//constexpr uint16_t VP_MOVE_E2 = 0x2114;
//constexpr uint16_t VP_MOVE_E3 = 0x2116;
//constexpr uint16_t VP_MOVE_E4 = 0x2118;
//constexpr uint16_t VP_MOVE_E5 = 0x211A;
constexpr uint16_t VP_HOME_ALL = 0x2120;
constexpr uint16_t VP_MOTOR_LOCK_UNLOK = 0x2130;

// Power loss recovery
constexpr uint16_t VP_POWER_LOSS_RECOVERY = 0x2180;

// Fan Control Buttons , switch between "off" and "on"
constexpr uint16_t VP_FAN0_CONTROL = 0x2200;
constexpr uint16_t VP_FAN1_CONTROL = 0x2202;
//constexpr uint16_t VP_FAN2_CONTROL = 0x2204;
//constexpr uint16_t VP_FAN3_CONTROL = 0x2206;

// Heater Control Buttons , triged between "cool down" and "heat PLA" state
constexpr uint16_t VP_E0_CONTROL = 0x2210;
constexpr uint16_t VP_E1_CONTROL = 0x2212;
//constexpr uint16_t VP_E2_CONTROL = 0x2214;
//constexpr uint16_t VP_E3_CONTROL = 0x2216;
//constexpr uint16_t VP_E4_CONTROL = 0x2218;
//constexpr uint16_t VP_E5_CONTROL = 0x221A;
constexpr uint16_t VP_BED_CONTROL = 0x221C;

// Preheat
constexpr uint16_t VP_E0_BED_PREHEAT = 0x2220;
constexpr uint16_t VP_E1_BED_CONTROL = 0x2222;
//constexpr uint16_t VP_E2_BED_CONTROL = 0x2224;
//constexpr uint16_t VP_E3_BED_CONTROL = 0x2226;
//constexpr uint16_t VP_E4_BED_CONTROL = 0x2228;
//constexpr uint16_t VP_E5_BED_CONTROL = 0x222A;

// Filament load and unload
constexpr uint16_t VP_E0_FILAMENT_LOAD_UNLOAD = 0x2300;
constexpr uint16_t VP_E1_FILAMENT_LOAD_UNLOAD = 0x2302;

// Settings store , reset
constexpr uint16_t VP_SETTINGS = 0x2400;

// PID autotune
constexpr uint16_t VP_PID_AUTOTUNE_E0 = 0x2410;
//constexpr uint16_t VP_PID_AUTOTUNE_E1 = 0x2412;
//constexpr uint16_t VP_PID_AUTOTUNE_E2 = 0x2414;
//constexpr uint16_t VP_PID_AUTOTUNE_E3 = 0x2416;
//constexpr uint16_t VP_PID_AUTOTUNE_E4 = 0x2418;
//constexpr uint16_t VP_PID_AUTOTUNE_E5 = 0x241A;
constexpr uint16_t VP_PID_AUTOTUNE_BED = 0x2420;

// Firmware version on the boot screen.
constexpr uint16_t VP_MARLIN_VERSION = 0x3000;
constexpr uint8_t VP_MARLIN_VERSION_LEN = 16;   // there is more space on the display, if needed.

// Place for status messages.
constexpr uint16_t VP_M117 = 0x3020;
constexpr uint8_t VP_M117_LEN = 0x20;

// Temperatures.
constexpr uint16_t VP_T_E0_Is = 0x3060;  // 4 Byte Integer
constexpr uint16_t VP_T_E0_Set = 0x3062; // 2 Byte Integer
constexpr uint16_t VP_T_E1_Is = 0x3064;  // 4 Byte Integer

// reserved to support up to 6 Extruders:
//constexpr uint16_t VP_T_E1_Set = 0x3066; // 2 Byte Integer
//constexpr uint16_t VP_T_E2_Is = 0x3068;  // 4 Byte Integer
//constexpr uint16_t VP_T_E2_Set = 0x306A; // 2 Byte Integer
//constexpr uint16_t VP_T_E3_Is = 0x306C;  // 4 Byte Integer
//constexpr uint16_t VP_T_E3_Set = 0x306E; // 2 Byte Integer
//constexpr uint16_t VP_T_E4_Is = 0x3070;  // 4 Byte Integer
//constexpr uint16_t VP_T_E4_Set = 0x3072; // 2 Byte Integer
//constexpr uint16_t VP_T_E4_Is = 0x3074;  // 4 Byte Integer
//constexpr uint16_t VP_T_E4_Set = 0x3076; // 2 Byte Integer
//constexpr uint16_t VP_T_E5_Is = 0x3078;  // 4 Byte Integer
//constexpr uint16_t VP_T_E5_Set = 0x307A; // 2 Byte Integer

constexpr uint16_t VP_T_Bed_Set = 0x3082; // 2 Byte Integer

constexpr uint16_t VP_Flowrate_E0 = 0x3090; // 2 Byte Integer
constexpr uint16_t VP_Flowrate_E1 = 0x3092; // 2 Byte Integer

// reserved for up to 6 Extruders:
//constexpr uint16_t VP_Flowrate_E2 = 0x3094;
//constexpr uint16_t VP_Flowrate_E3 = 0x3096;
//constexpr uint16_t VP_Flowrate_E4 = 0x3098;
//constexpr uint16_t VP_Flowrate_E5 = 0x309A;

constexpr uint16_t VP_Fan0_Percentage = 0x3100;  // 2 Byte Integer (0..100)
constexpr uint16_t VP_Fan1_Percentage = 0x33A2;  // 2 Byte Integer (0..100)
//constexpr uint16_t VP_Fan2_Percentage = 0x33A4;  // 2 Byte Integer (0..100)
//constexpr uint16_t VP_Fan3_Percentage = 0x33A6;  // 2 Byte Integer (0..100)



constexpr uint16_t VP_PrintAccTime = 0x3160;
constexpr uint16_t VP_PrintAccTime_LEN = 32;

constexpr uint16_t VP_PrintsTotal = 0x3180;
constexpr uint16_t VP_PrintsTotal_LEN = 16;


// SDCard File Listing
constexpr uint16_t VP_SD_FileName0 = 0x3200;
constexpr uint16_t VP_SD_FileName1 = 0x3220;
constexpr uint16_t VP_SD_FileName2 = 0x3240;
constexpr uint16_t VP_SD_FileName3 = 0x3260;
constexpr uint16_t VP_SD_FileName4 = 0x3280;

constexpr uint16_t VP_SD_Print_ProbeOffsetZ = 0x32A0; //

// Fan status
constexpr uint16_t VP_FAN0_STATUS = 0x3300;
constexpr uint16_t VP_FAN1_STATUS = 0x3302;
//constexpr uint16_t VP_FAN2_STATUS = 0x3304;
//constexpr uint16_t VP_FAN3_STATUS = 0x3306;

// Heater status
constexpr uint16_t VP_E0_STATUS = 0x3310;
//constexpr uint16_t VP_E1_STATUS = 0x3312;
//constexpr uint16_t VP_E2_STATUS = 0x3314;
//constexpr uint16_t VP_E3_STATUS = 0x3316;
//constexpr uint16_t VP_E4_STATUS = 0x3318;
//constexpr uint16_t VP_E5_STATUS = 0x331A;
constexpr uint16_t VP_BED_STATUS = 0x331C;

constexpr uint16_t VP_MOVE_OPTION = 0x3400;

// Step per mm
constexpr uint16_t VP_X_STEP_PER_MM = 0x3600; // at the moment , 2 byte unsigned int , 0~1638.4
//constexpr uint16_t VP_X2_STEP_PER_MM = 0x3602;
constexpr uint16_t VP_Y_STEP_PER_MM = 0x3604;
//constexpr uint16_t VP_Y2_STEP_PER_MM = 0x3606;
constexpr uint16_t VP_Z_STEP_PER_MM = 0x3608;
//constexpr uint16_t VP_Z2_STEP_PER_MM = 0x360A;
constexpr uint16_t VP_E0_STEP_PER_MM = 0x3610;
//constexpr uint16_t VP_E1_STEP_PER_MM = 0x3612;
//constexpr uint16_t VP_E2_STEP_PER_MM = 0x3614;
//constexpr uint16_t VP_E3_STEP_PER_MM = 0x3616;
//constexpr uint16_t VP_E4_STEP_PER_MM = 0x3618;
//constexpr uint16_t VP_E5_STEP_PER_MM = 0x361A;

// PIDs
constexpr uint16_t VP_E0_PID_P = 0x3700; // at the moment , 2 byte unsigned int , 0~1638.4
constexpr uint16_t VP_E0_PID_I = 0x3702;
constexpr uint16_t VP_E0_PID_D = 0x3704;
constexpr uint16_t VP_BED_PID_P = 0x3710;
constexpr uint16_t VP_BED_PID_I = 0x3712;
constexpr uint16_t VP_BED_PID_D = 0x3714;

// Wating screen status
constexpr uint16_t VP_WAITING_STATUS = 0x3800;

// SPs for certain variables...
// located at 0x5000 and up
// Not used yet!
// This can be used e.g to make controls / data display invisible
constexpr uint16_t SP_T_E0_Is = 0x5000;
constexpr uint16_t SP_T_E0_Set = 0x5010;
constexpr uint16_t SP_T_E1_Is = 0x5020;
constexpr uint16_t SP_T_Bed_Is = 0x5030;
constexpr uint16_t SP_T_Bed_Set = 0x5040;
#endif

